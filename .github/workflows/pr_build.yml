name: Pull Request Build

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Debug output
      run: |
        echo "Base ref: $GITHUB_BASE_REF"
        echo "SHA: $GITHUB_SHA"

    - name: Get changed files
      id: files
      run: |
        echo "Base ref: ${{ github.event.pull_request.base.sha }}"
        echo "Head ref: ${{ github.event.pull_request.head.sha }}"
        git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > changed_files.txt
        echo "::set-output name=all::$(cat changed_files.txt)"
        
    - name: Print all changed files
      run: | 
        echo "Changed Files: ${{ steps.files.outputs.all }}"

    - name: Generate matrix for build
      id: set-matrix
      run: python scripts/matrix-generator.py
      env:
        GITHUB_BASE_REF: ${{ github.base_ref }}
        GITHUB_SHA: ${{ github.event.pull_request.head.sha }}"

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}

    # - name: Build and push multi-architecture Docker image
    #   uses: docker/build-push-action@v3
    #   with:
    #     context: .
    #     file: ./path-to-your/Dockerfile
    #     push: true
    #     tags: your-username/your-image-name:latest
    #     platforms: linux/amd64,linux/arm64,linux/arm/v7
    # ${{ join(matrix.architecture, ',') }}

  build-images:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.build.outputs.matrix)}}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build Docker image
      run: docker build -t ${{ matrix.name }} --file ${{ matrix.context }}/Dockerfile ${{ matrix.context }}
